@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles{
    <link rel="stylesheet" href="~/css/adminPage.css">
}

<div class="form">
    @*Область добавления новой категории*@
    <div id="addProductTypeDiv"
         class="addProduct_group"
         style="display:none; flex-direction: row;">
        <button class="action_button"
                onclick="openTab('addProductDiv', 0)">
            <img class="image_button" src="/images/icon-back2.png" />
        </button>
        <div class="field_group">
            <input type="text"
                   id="nameProductType"
                   class="field_input"
                   placeholder=" ">
            <lable class="field_lable">Новая категория</lable>
            <lable id="nameProductTypePopup"
                   class="popup_lable">
            </lable>
        </div>
        <button id="addTypeBtn"
                class="action_button"
                onclick="addProductType()">
            <img class="image_button" src="/images/icon-add2.png" />
        </button>
        <button id="editTypeBtn"
                class="action_button"
                onclick="editProductType()"
                style="display:none">
            <img class="image_button" src="/images/icon-edit.png" />
        </button>
    </div>

    @*Область добавления нового продукта*@
    <div id="addProductDiv"
         class="addProduct_group">
        <div class="addProductType_group">
            <button class="action_button"
                    onclick="deleteProductType()">
                <img class="image_button" src="/images/icon-delete.png" />
            </button>
            <select id="productTypeList"
                    class="category_select">
            </select>
            <button class="action_button"
                    onclick="openTab('addProductTypeDiv', 0)">
                <img class="image_button" src="/images/icon-add.png" />
            </button>
            <button class="action_button"
                    onclick="openTab('addProductTypeDiv', 1)">
                <img class="image_button" src="/images/icon-edit.png" />
            </button>
        </div>
        <div class="field_group">
            <input type="text"
                   id="nameProduct"
                   class="field_input"
                   placeholder=" ">
            <lable class="field_lable">Наименование продукта</lable>
            <lable id="nameProductPopup"
                   class="popup_lable">
            </lable>
        </div>
        <div class="field_group">
            <input type="text"
                   id="descriptionProduct"
                   class="field_input"
                   placeholder=" ">
            <lable class="field_lable">Описание</lable>
            <lable id="descriptionProductPopup"
                   class="popup_lable">
            </lable>
        </div>
        <div class="field_group">
            <input type="number"
                   id="priceProduct"
                   class="field_input"
                   placeholder=" ">
            <lable class="field_lable">Цена</lable>
            <lable id="priceProductPopup"
                   class="popup_lable">
            </lable>
        </div>
        <div class="field_group">
            <input type="number"
                   id="countProduct"
                   class="field_input"
                   placeholder=" ">
            <lable class="field_lable">Количество</lable>
            <lable id="countProductPopup"
                   class="popup_lable">
            </lable>
        </div>
        <button id="addBtn"
                class="addProduct_button"
                onclick="addProductInfo()">
            Добавить
        </button>
        <button id="editBtn"
                class="addProduct_button"
                style="display:none"
                onclick="editProductInfo()">
            Изменить
        </button>
    </div>

    @*Таблица с продуктами*@
    <table style='border-radius: 15px'>
        <thead>
            <tr>
                <th>Название</th>
                <th>Описание</th>
                <th>Цена, руб</th>
                <th>Количество, шт</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody id="productTableBody">
        </tbody>
    </table>
</div>

<script>
    var itemId;
    var workMode;//0-добавление категории, 1-редактирование категории

    var userInfo = document.getElementById("userInfo");

    var addButton = document.getElementById("addBtn");
    var editButton = document.getElementById("editBtn");

    var addTypeButton = document.getElementById("addTypeBtn");
    var editTypeButton = document.getElementById("editTypeBtn");

    var contentProductTableBody = document.getElementById("productTableBody");

    var productTypeListSelect = document.getElementById("productTypeList");
    var nameProductTypeInput = document.getElementById("nameProductType");
    var nameProductInput = document.getElementById("nameProduct");
    var descriptionProductInput = document.getElementById("descriptionProduct");
    var priceProductInput = document.getElementById("priceProduct");
    var countProductInput = document.getElementById("countProduct");

    var nameProductTypePopup = document.getElementById("nameProductTypePopup");
    var nameProductPopup = document.getElementById("nameProductPopup");
    var descriptionProductPopup = document.getElementById("descriptionProductPopup");
    var priceProductPopup = document.getElementById("priceProductPopup");
    var countProductPopup = document.getElementById("countProductPopup");

    ////////////////////////////


    (async () => {
        await getUserInfo();
        await startDrawProductType();
        await startDrawTableProduct();
    })();


    ///////////////////////////

    /////Запрос на добавление категории продуктов
    async function addProductType() {
        var nameProductType = nameProductTypeInput.value.trim();

        if (productTypeValidate(nameProductType)) {
            const response = await fetch("/ProductType/Add", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: nameProductType
                })
            });
            const message = await response.json();
            if (response.status == 200) {
                cleanInputField();
                startDrawProductType();
                openDialog("Категория добавлена");
            }else{
                openDialog(message.errorText);
            }
        }
    }

    /////Запрос на редактирование категории продуктов
    async function editProductType(){
        var nameProductType = nameProductTypeInput.value.trim();

        if (productTypeValidate(nameProductType)) {
            const response = await fetch("/ProductType/Edit", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Id: itemId,
                    Name: nameProductType
                })
            });
            const message = await response.json();
            if (response.status == 200) {
                cleanInputField();
                openTab('addProductDiv', 0);
                startDrawProductType();
                openDialog("Категория изменена");
            }else{
                openDialog(message.errorText);
            }
        }
    }

    /////Запрос информации о категории продуктов
    async function startDrawProductType() {
        const response = await fetch("/ProductType/GetAll");
        const message = await response.json();
        if (response.status == 200) {
            productTypeListSelect.innerHTML = '';
            message.forEach(drawProductType);
        }else{
            openDialog(message.errorText);
        }
    }

    function drawProductType(item) {
        productTypeListSelect.innerHTML += '<option value="' + item.id + '">' + item.name + '</option>'
    }

    /////Запрос информации о конкретной категории
    async function switchToEditProductType(){
        const response = await fetch(`/ProductType/Get/${productTypeListSelect.value}`);
        const message = await response.json();
        if (response.status == 200) {
            nameProductTypeInput.value = message.name;
            itemId = message.id
        }else{
            openDialog(message.errorText);
        }
    }

    /////Запрос на удаление категории продуктов
    async function deleteProductType(){
        const response = await fetch(`/ProductType/Delete/${productTypeListSelect.value}`,
            { method: "DELETE" }
        );
        const message = await response.json();
        if (response.status == 200) {
            cleanInputField();
            await startDrawProductType();
            await startDrawTableProduct();
            openDialog("Категория удалена");
        }else{
            openDialog(message.errorText);
        }
    }

    /////Запрос информации о списке продуктов
    var productTypeId = 0;
    async function startDrawTableProduct() {
        const response = await fetch("/Product/GetAll");
        const message = await response.json();
        if (response.status == 200) {
            contentProductTableBody.innerHTML = '';
            message.forEach(drawTableProduct);
            productTypeId = 0;
        }else{
            openDialog(message.errorText);
        }
    }

    function drawTableProduct(item) {
        if (productTypeId == 0 || (productTypeId != 0 && productTypeId != item.productTypeId)) {
            contentProductTableBody.innerHTML +=
                '<tr>' +
                    '<td style="background-color:#008214;" colspan="5">' +
                        productTypeListSelect.options[item.productTypeId - 1].innerText +
                    '</td>' +
                '<tr>'
        }
        productTypeId = item.productTypeId;

        contentProductTableBody.innerHTML +=
            '<tr>' +
                '<td width="40%">' + item.name + '</td>' +
                '<td width="20%">' + item.description + '</td>' +
                '<td width="15%">' + item.price + '</td>' +
                '<td width="15%">' + item.count + '</td>' +
                '<td width="10%">' +
                    '<a href="#productTypeList">' +
                        '<button class="action_button" onclick="switchToEdit(' + item.id + ')">' +
                            '<img class="image_button" src="/images/icon-edit.png"/>' +
                        '</button>' +
                    '</a>' +
                    '<button class="action_button" onclick="switchToDelete(' + item.id + ')">' +
                        '<img class="image_button" src="/images/icon-delete.png"/>' +
                    '</button>' +
            '</tr>';
    }

    async function switchToEdit(id) {
        const response = await fetch(`/Product/Get/${id}`);
        const message = await response.json();
        if (response.status == 200) {
            addButton.style.display = "none";
            editButton.style.display = "block";

            nameProductInput.value = message.name;
            descriptionProductInput.value = message.description;
            productTypeListSelect.value = message.productTypeId;
            priceProductInput.value = message.price;
            countProductInput.value = message.count;

            itemId = id;
        }else{
            openDialog(message.errorText);
        }
    }

    async function switchToDelete(id) {
        const response = await fetch(`/Product/Delete/${id}`,
            { method: "DELETE" }
        );
        const message = await response.json();
        if (response.status == 200) {
            startDrawTableProduct();
            openDialog("Товар удален");
        }else{
            openDialog(message.errorText);
        }
    }

    /////Запрос на добавление нового продукта
    async function addProductInfo() {
        var nameProduct = nameProductInput.value.trim();
        var descriptionProduct = descriptionProductInput.value.trim();
        var priceProduct = priceProductInput.value/1;
        var countProduct = countProductInput.value/1;

        if (productValidate(nameProduct, descriptionProduct, priceProduct, countProduct)){
            const response = await fetch("/Product/Add", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: nameProduct,
                    Description: descriptionProduct,
                    ProductTypeId: productTypeListSelect.value,
                    Price: priceProduct,
                    Count: countProduct
                })
            });
            const message = await response.json();
            if (response.status == 200) {
                cleanInputField();
                startDrawTableProduct();
                openDialog("Продукт добавлен");
            }else{
                openDialog(message.errorText);
            }
        }
    }

    /////Запрос на редактирование информации о продукте
    async function editProductInfo() {
        var nameProduct = nameProductInput.value.trim();
        var descriptionProduct = descriptionProductInput.value.trim();
        var priceProduct = priceProductInput.value/1;
        var countProduct = countProductInput.value/1;

        if (productValidate(nameProduct, descriptionProduct, priceProduct, countProduct)){
            const response = await fetch("/Product/Edit", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Id: itemId,
                    Name: nameProduct,
                    Description: descriptionProduct,
                    ProductTypeId: productTypeListSelect.value,
                    Price: priceProduct,
                    Count: countProduct
                })
            });
            const message = await response.json();
            if (response.status == 200) {

                addButton.style.display = "block";
                editButton.style.display = "none";

                cleanInputField();

                startDrawTableProduct();

                openDialog("Информация обновлена");
            }else{
                openDialog(message.errorText);
            }
        }
    }

    /////Запрос информации о пользователе
    async function getUserInfo() {
        const response = await fetch("/User/GetInfo");
        const message = await response.json();
        if (response.status == 200) {
            userInfo.innerText = message.name + " " + message.lastName;
        } else if (response.status == 401) {
            logout();
        }else{
            openDialog(message.errorText);
        }
    }

    ////Управление элементами интерфейса
    function openTab(idDiv, workMode) {
        var i, tabContent;
        tabContent = document.getElementsByClassName("addProduct_group");
        for (i = 0; i < tabContent.length; i++) {
            tabContent[i].style.display = "none";
        }

        document.getElementById(idDiv).style.display = "flex";

        if (workMode == 0){
            addTypeButton.style.display="block";
            editTypeButton.style.display="none";
            nameProductTypePopup.style.display="none";
        }
        else{
            addTypeButton.style.display = "none";
            editTypeButton.style.display = "block";
            switchToEditProductType();
        }
    }

    function cleanInputField() {
        nameProductTypeInput.value = "";
        nameProductInput.value = "";
        descriptionProductInput.value = "";
        priceProductInput.value = "";
        countProductInput.value = "";
    }

    /////Валидация
    const REG_CYRILLIC_NUMBER_POINT_SPACE = /^[А-Яа-яЁё0-9. ]+$/;
    const REG_CYRILLIC_SPACE = /^[А-Яа-яЁё ]+$/;
    const REG_CYRILLIC_LATIN_SPACE = /^[A-Za-zА-Яа-яЁё" ]+$/;

    const POPUP_CYRILLIC_LATIN_QUOTE_SPACE_TEXT = "Используйте только кириллицу, латиницу, кавычки и пробел";
    const POPUP_CYRILLIC_NUMBER_SPACE_TEXT = "Используйте только кириллицу, цифры, точку и пробел";
    const POPUP_CYRILLIC_SPACE_TEXT = "Используйте только кириллицу и пробелы";

    function productValidate(nameProduct, descriptionProduct, priceProduct, countProduct) {
        var statusField1 = checkField(3, 50, nameProduct, REG_CYRILLIC_LATIN_SPACE,
                                      nameProductPopup, POPUP_CYRILLIC_LATIN_QUOTE_SPACE_TEXT, false);
        var statusField2 = checkField(3, 50, descriptionProduct, REG_CYRILLIC_NUMBER_POINT_SPACE,
                                      descriptionProductPopup, POPUP_CYRILLIC_NUMBER_SPACE_TEXT, false);
        var statusField3 = checkFieldNumber(1, 900000, priceProduct, priceProductPopup, false);
        var statusField4 = checkFieldNumber(1, 1000000, countProduct, countProductPopup, true);

        return statusField1 && statusField2
            && statusField3 && statusField4;
    }

    function productTypeValidate(nameProductType) {
        return checkField(3, 20, nameProductType, REG_CYRILLIC_SPACE,
                          nameProductTypePopup, POPUP_CYRILLIC_SPACE_TEXT, false);
    }
</script>