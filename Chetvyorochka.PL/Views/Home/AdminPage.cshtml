@{
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="~/css/adminPage.css">
</head>
<body>
    <div class="form">
        @*Область добавления новой категории*@
        <div id="addProductTypeDiv"
             class="addProduct_group"
             style="display:none; flex-direction: row;">
            <button class="action_button"
                    onclick="openTab('addProductDiv', 0)">
                <img class="image_button" src="/images/icon-back2.png">
            </button>
            <div class="field_group">
                <input type="text"
                       id="nameProductType"
                       class="field_input"
                       placeholder=" ">
                <lable class="field_lable">Новая категория</lable>
            </div>
            <button id="addTypeBtn"
                    class="action_button"
                    onclick="addProductType()">
                <img class="image_button" src="/images/icon-add2.png">
            </button>
            <button id="editTypeBtn"
                    class="action_button"
                    onclick="editProductType()"
                    style="display:none">
                <img class="image_button" src="/images/icon-edit.png">
            </button>
        </div>

        @*Область добавления нового продукта*@
        <div id="addProductDiv"
             class="addProduct_group">
            <div class="addProductType_group">
                <button class="action_button"
                        onclick="deleteProductType()">
                    <img class="image_button" src="/images/icon-delete.png">
                </button>
                <select id="productTypeList"
                        class="category_select">
                </select>
                <button class="action_button"
                        onclick="openTab('addProductTypeDiv', 0)">
                    <img class="image_button" src="/images/icon-add.png">
                </button>
                <button class="action_button"
                        onclick="openTab('addProductTypeDiv', 1)">
                    <img class="image_button" src="/images/icon-edit.png">
                </button>
            </div>
            <div class="field_group">
                <input type="text"
                       id="nameProduct"
                       class="field_input"
                       placeholder=" ">
                <lable class="field_lable">Наименование продукта</lable>
            </div>
            <div class="field_group">
                <input type="text"
                       id="descriptionProduct"
                       class="field_input"
                       placeholder=" ">
                <lable class="field_lable">Описание</lable>
            </div>
            <div class="field_group">
                <input type="number"
                       id="priceProduct"
                       class="field_input"
                       placeholder=" ">
                <lable class="field_lable">Цена</lable>
            </div>
            <div class="field_group">
                <input type="number"
                       id="countProduct"
                       class="field_input"
                       placeholder=" ">
                <lable class="field_lable">Количество</lable>
            </div>
            <button id="addBtn"
                    class="addProduct_button"
                    onclick="addProductInfo()">
                Добавить
            </button>
            <button id="editBtn"
                    class="addProduct_button"
                    style="display:none"
                    onclick="editProductInfo()">
                Изменить
            </button>
        </div>

        @*Таблица с продуктами*@
        <table style='border-radius: 15px'>
            <thead>
                <tr>
                    <th>Название</th>
                    <th>Описание</th>
                    <th>Цена, руб</th>
                    <th>Количество, шт</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody id="productTableBody">

            </tbody>
        </table>
    </div>
</body>
</html>


<script>
    var itemId;
    var workMode;//0-добавление категории, 1-редактирование категории

    var userInfo = document.getElementById("userInfo");

    //var errorMessage = document.getElementById("errorLbl");
    //var errorDialog = document.getElementById("errorDlg");

    var addButton = document.getElementById("addBtn");
    var editButton = document.getElementById("editBtn");

    var addTypeButton = document.getElementById("addTypeBtn");
    var editTypeButton = document.getElementById("editTypeBtn");

    var contentProductTableBody = document.getElementById("productTableBody");

    var productTypeListSelect = document.getElementById("productTypeList");
    var nameProductTypeInput = document.getElementById("nameProductType");
    var nameProductInput = document.getElementById("nameProduct");
    var descriptionProductInput = document.getElementById("descriptionProduct");
    var priceProductInput = document.getElementById("priceProduct");
    var countProductInput = document.getElementById("countProduct");

    ////////////////////////////


    (async () => {
        await getUserInfo();
        await startDrawProductType();
        await startDrawTableProduct();
    })();


    ///////////////////////////

    /////Запрос на добавление категории продуктов
    async function addProductType() {
        const response = await fetch("/ProductType/Add", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Name: nameProductTypeInput.value
            })
        });
        const message = await response.json();
        if (response.status == 401 || response.status == 400) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            cleanInputField();
            startDrawProductType();
            openDialog("Категория добавлена");
        }
    }

    /////Запрос на редактирование категории продуктов
    async function editProductType(){
        const response = await fetch("/ProductType/Edit", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: itemId,
                Name: nameProductTypeInput.value
            })
        });
        const message = await response.json();
        if (response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            cleanInputField();
            openTab('addProductDiv', 0);
            startDrawProductType();
            openDialog("Категория изменена");
        }
    }

    /////Запрос информации о категории продуктов
    async function startDrawProductType() {
        const response = await fetch("/ProductType/GetAll");
        const message = await response.json();
        if (response.status == 200) {
            productTypeListSelect.innerHTML = '';
            message.forEach(drawProductType);
        }
    }

    function drawProductType(item) {
        productTypeListSelect.innerHTML += '<option value="' + item.id + '">' + item.name + '</option>'
    }

    /////Запрос информации о конкретной категории
    async function switchToEditProductType(){
        const response = await fetch(`/ProductType/Get/${productTypeListSelect.value}`);
        const message = await response.json();
        if (response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            nameProductTypeInput.value = message.name;
            itemId = message.id
        }
    }

    /////Запрос на удаление категории продуктов
    async function deleteProductType(){
        const response = await fetch(`/ProductType/Delete/${productTypeListSelect.value}`,
            { method: "DELETE" }
        );
        const message = await response.json();
        if (response.status == 401 || response.status == 400) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            cleanInputField();
            await startDrawProductType();
            await startDrawTableProduct();
            openDialog("Категория удалена");
        }
    }

    /////Запрос информации о списке продуктов
    var productTypeId = 0;
    async function startDrawTableProduct() {
        const response = await fetch("/Product/GetAll");
        const message = await response.json();
        if (response.status == 200) {
            contentProductTableBody.innerHTML = '';
            message.forEach(drawTableProduct);
            productTypeId = 0;
        }
    }

    function drawTableProduct(item) {
        if (productTypeId == 0 || (productTypeId != 0 && productTypeId != item.productTypeId)) {
            contentProductTableBody.innerHTML +=
                '<tr>' +
                    '<td style="background-color:#008214;" colspan="5">' +
                        productTypeListSelect.options[item.productTypeId - 1].innerText +
                    '</td>' +
                '<tr>'
        }
        productTypeId = item.productTypeId;

        contentProductTableBody.innerHTML +=
            '<tr>' +
                '<td width="40%">' + item.name + '</td>' +
                '<td width="20%">' + item.description + '</td>' +
                '<td width="15%">' + item.price + '</td>' +
                '<td width="15%">' + item.count + '</td>' +
                '<td width="10%">' +
                    '<button class="action_button" onclick="switchToEdit(' + item.id + ')">'+
                        '<img class="image_button" src="/images/icon-edit.png">' +
                    '</button>' +
                    '<button class="action_button" onclick="switchToDelete(' + item.id + ')">' +
                        '<img class="image_button" src="/images/icon-delete.png">' +
                    '</button>' +
            '</tr>';
    }

    async function switchToEdit(id) {
        const response = await fetch(`/Product/Get/${id}`);
        const message = await response.json();
        if (response.status == 401 || response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            addButton.style.display = "none";
            editButton.style.display = "block";

            nameProductInput.value = message.name;
            descriptionProductInput.value = message.description;
            productTypeListSelect.value = message.productTypeId;
            priceProductInput.value = message.price;
            countProductInput.value = message.count;

            itemId = id;
        }
    }

    async function switchToDelete(id) {
        const response = await fetch(`/Product/Delete/${id}`,
            { method: "DELETE" }
        );
        const message = await response.json();
        if (response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            startDrawTableProduct();
            openDialog("Товар удален");
        }
    }

    /////Запрос на добавление нового продукта
    async function addProductInfo() {
        const response = await fetch("/Product/Add", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Name: nameProductInput.value,
                Description: descriptionProductInput.value,
                ProductTypeId: productTypeListSelect.value,
                Price: priceProductInput.value,
                Count: countProductInput.value
            })
        });
        const message = await response.json();
        if (response.status == 401 || response.status == 400) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {
            cleanInputField();
            startDrawTableProduct();
            openDialog("Продукт добавлен");
        }
    }

    /////Запрос на редактирование информации о продукте
    async function editProductInfo() {
        const response = await fetch("/Product/Edit", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: itemId,
                Name: nameProductInput.value,
                Description: descriptionProductInput.value,
                ProductTypeId: productTypeListSelect.value,
                Price: priceProductInput.value,
                Count: countProductInput.value
            })
        });
        const message = await response.json();
        if (response.status == 401 || response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {

            addButton.style.display = "block";
            editButton.style.display = "none";

            cleanInputField();

            startDrawTableProduct();

            openDialog("Информация обновлена");
        }
    }

    /////Запрос информации о пользователе
    async function getUserInfo() {
        const response = await fetch("/User/GetInfo");
        const message = await response.json();
        if (response.status == 404) {
            openDialog(message.errorText);
        }
        if (response.status == 200) {

            userInfo.innerText = message.name + " " + message.lastName;
        }
    }

    ////Управление элементами интерфейса
    function openTab(idDiv, workMode) {
        var i, tabContent;
        tabContent = document.getElementsByClassName("addProduct_group");
        for (i = 0; i < tabContent.length; i++) {
            tabContent[i].style.display = "none";
        }

        document.getElementById(idDiv).style.display = "flex";

        if (workMode == 0){
            addTypeButton.style.display="block";
            editTypeButton.style.display="none";
        }
        else{
            addTypeButton.style.display = "none";
            editTypeButton.style.display = "block";
            switchToEditProductType();
        }
    }

    function cleanInputField() {
        nameProductTypeInput.value = "";
        nameProductInput.value = "";
        descriptionProductInput.value = "";
        priceProductInput.value = "";
        countProductInput.value = "";
    }
</script>